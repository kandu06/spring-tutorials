<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Tells spring container to use annotations. -->
	<mvc:annotation-driven/> <!-- Tells spring container to use annotations. -->
	
	<!-- which pkg to scan for components. -->
	<context:component-scan base-package="com.fitness"/> 
	
	<!--  static resources configuration -->
	<mvc:resources location="files" mapping="/files/**"/> 
	
	<!-- Loads the property file and makes it available in JSP via spring:message tags. basename here matches with the name of the property file messages.properies under /src/main/resource. -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="messages"/> 
	
	<!-- Session Local resolver, used to determine which local the user's session uses.  NOTE: the bean id has to be localeResolver for the localChangeInterceptor to work. -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" p:defaultLocale="en"/>

	<!--  Interceptors -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="language"/> <!-- language the parameter the jsp sends and is used to change local. -->
	</mvc:interceptors>
	
	
	<!-- Internal Resource View Resolver. Used to find the JSP based on return string from controllers. -->
	<!--  Long form 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	 -->
	 <!--  short form using p: instead of property tag. Internal view resolver needs to be the last to be called, so the order should be last here.-->
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
	 p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" p:order="3"/>
	 
	 <!-- Example of content negotiating view resolver. based on the extension of the file requested, appropriate return type will be selected. Eg, .json request will return .json and .xml request will return .xml resonse. -->	
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager">
			<bean class="org.springframework.web.accept.ContentNegotiationManager">
				<constructor-arg>
					<bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
						<constructor-arg>
							<map>
								<entry key="json" value="application/json" />
								<entry key="xml" value="application/xml" />
							</map>
						</constructor-arg>
					</bean>
				</constructor-arg>
			</bean>
		</property>
		
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="autodetectAnnotations" value="true" />
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	 
	 <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>

</beans>
